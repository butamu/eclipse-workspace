
public class Graph {
	private final int maxVertices = 20;
	private Vertex vertexList[];
	private int adjMatrix[][];
	private int nVertices;
	private Queue queue = new Queue(maxVertices); //create an empty queue for BSF
	private Stack stack = new Stack(maxVertices); //create an empty stack for DFS
	
	public Graph() {
		vertexList = new Vertex[maxVertices];
		adjMatrix = new int[maxVertices][maxVertices];
		nVertices = 0;
		
		//initiate matrix to zeros, no connections yet
		for(int i=0;i<maxVertices;i++)
			for(int j=0;j<maxVertices;j++)
				adjMatrix[i][j] = 0;
	}
	public void addVertex(char c) {
		vertexList[nVertices++] = new Vertex(c);
	}
	
	public void addEdge(int from, int to) {
		adjMatrix[from][to] = 1;
		adjMatrix[to][from] = 1;
	}
	
	private void displayVertex(int v) {
		System.out.print(vertexList[v].label+" ");
	}
	
	public void display() {
		for(int i=0;i<maxVertices;i++)
			for(int j=0;j<maxVertices;j++) {
				if(adjMatrix[i][j]==1) {
					displayVertex(i);
					displayVertex(j);
					System.out.println("");
				}
			}
	}
	
	private int getIndex(char c) {
		//search for the vertex index
		for(int k=0;k<nVertices;k++) {
			if(vertexList[k].label == c)
				return k; //was found
		}
		return -1; //not found
		
				
	}
	
	private void resetVertices() {
		for(int i=0;i<nVertices;i++)
			vertexList[i].wasVisited = false;
	}
	
	private void getAdjVertices(int v) {
		for(int i=0;i<nVertices;i++) {
			if(adjMatrix[v][i]==1 && vertexList[i].wasVisited==false) {
				queue.insert(i);
				vertexList[i].wasVisited = true;
			}
			
		}
	}
	
	public void BFS(char c) {
		int currentVertex = getIndex(c);
		
		
		if(currentVertex == -1) {
			System.out.println("Vertex '" + c + "' was not found in graph");
		}
		else {
			
			vertexList[currentVertex].wasVisited = true;
			queue.insert(currentVertex);
			
			while(!queue.isEmpty()) {
				currentVertex = queue.remove();				
				displayVertex(currentVertex);
				getAdjVertices(currentVertex);
			}
			
		}
		
		resetVertices();
		
	}
	
	private int getNextVertex(int v) {
		for(int i=0;i<nVertices;i++) {
			if(adjMatrix[v][i] == 1 && vertexList[i].wasVisited==false) 
				return i; //return the index of the adjacent vertex							
			
		}
		return -1; //no adjacent vertex found
		
	}
	
	public void DSF(char c) {
		int currentVertex = getIndex(c);
		if(currentVertex == -1) {
			System.out.println("Vertex '" + c + "' was not found in graph");
		}
		else {
			
			stack.push(currentVertex);
			vertexList[currentVertex].wasVisited = true; //mark it as visited
			
			for(int k=0;k<nVertices;k++) {//while there are more adjacent vertices
				currentVertex = getNextVertex(currentVertex);
				if(currentVertex != -1) {
					stack.push(currentVertex);
					vertexList[currentVertex].wasVisited = true; //mark it as visited
				}
				else
					currentVertex = stack.pop();
				displayVertex(currentVertex);
			}
			while(!stack.isEmpty()) {
				currentVertex = stack.pop();
				getNextVertex(currentVertex);
			}
		}
		
		resetVertices();
		
	}

}
